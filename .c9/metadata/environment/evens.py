{"filter":false,"title":"evens.py","tooltip":"/evens.py","undoManager":{"mark":71,"position":71,"stack":[[{"start":{"row":0,"column":0},"end":{"row":11,"column":26},"action":"insert","lines":["def even_number_of_evens(numbers):","    return False","","assert even_number_of_evens([]) == False, \"No numbers\"   ","# assert even_number_of_evens([2]) == False, \"One even number\"","# assert even_number_of_evens([2, 4]) == True, \"Two even numbers\"","# assert even_number_of_evens([2, 3]) == False, \"Two numbers, only one even\"","# assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8]) == False, \"Multiple numbers, three even\"","# assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8, 5, 12]) == True, \"Multiple numbers, four even\"","# assert even_number_of_evens([1, 3, 9]) == False, \"No even numbers\"","","print(\"All tests passed!\")"],"id":1}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":2},"action":"remove","lines":["# "],"id":2}],[{"start":{"row":5,"column":0},"end":{"row":5,"column":2},"action":"remove","lines":["# "],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":10,"column":20},"action":"insert","lines":["def is_even(number):","    \"\"\"","    A small helper function that simply checks to see if the number ","    question is an even number, or an odd number.","    `number` is the number in question","    Returns `True` if the number is even, `False` if the number is odd","    \"\"\"","    if number % 2 == 0:","        return True","    else:","        return False"],"id":5}],[{"start":{"row":10,"column":20},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":11,"column":0},"end":{"row":11,"column":8},"action":"insert","lines":["        "]},{"start":{"row":11,"column":8},"end":{"row":12,"column":0},"action":"insert","lines":["",""]},{"start":{"row":12,"column":0},"end":{"row":12,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":12,"column":0},"end":{"row":67,"column":54},"action":"insert","lines":["def even_number_of_evens(numbers):","    \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if the length of the list is greater than 0, iterate over each item","            to find out how many even numbers are in the list, and if the","            number of even numbers is an even number, return `True`","        - if the total number of even numbers in the list of 0, return `False`","        - if the number of even numbers contained in the list is an odd","            number, return `False`","        - if the list contains no items, return `False`","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number of even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty. If it is, return `False`, else start","    # the iterative process","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        number_of_evens = 0","        for number in numbers:","            if is_even(number):","                number_of_evens += 1","","        # If no even numbers are found, return `False`","        if number_of_evens == 0:","            return False","        evens = 0","","        # If the number of even numbers found, is even, return `True`,","        # else return `False`","        if is_even(number_of_evens):","            return True","        else:","            return False","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","","    if evens == 0:","        return False","    else:","        return evens % 2 == 0","","# Our set of test cases","assert even_number_of_evens([]) == False, \"No numbers\""],"id":7}],[{"start":{"row":75,"column":0},"end":{"row":75,"column":2},"action":"remove","lines":["# "],"id":8},{"start":{"row":76,"column":0},"end":{"row":76,"column":2},"action":"remove","lines":["# "]},{"start":{"row":77,"column":0},"end":{"row":77,"column":2},"action":"remove","lines":["# "]},{"start":{"row":78,"column":0},"end":{"row":78,"column":2},"action":"remove","lines":["# "]}],[{"start":{"row":74,"column":0},"end":{"row":74,"column":2},"action":"insert","lines":["# "],"id":9}],[{"start":{"row":77,"column":0},"end":{"row":77,"column":2},"action":"insert","lines":["# "],"id":10}],[{"start":{"row":70,"column":15},"end":{"row":70,"column":16},"action":"remove","lines":["e"],"id":11},{"start":{"row":70,"column":14},"end":{"row":70,"column":15},"action":"remove","lines":["s"]},{"start":{"row":70,"column":13},"end":{"row":70,"column":14},"action":"remove","lines":["l"]},{"start":{"row":70,"column":12},"end":{"row":70,"column":13},"action":"remove","lines":["a"]},{"start":{"row":70,"column":11},"end":{"row":70,"column":12},"action":"remove","lines":["F"]}],[{"start":{"row":70,"column":11},"end":{"row":70,"column":12},"action":"insert","lines":["T"],"id":12},{"start":{"row":70,"column":12},"end":{"row":70,"column":13},"action":"insert","lines":["r"]}],[{"start":{"row":70,"column":11},"end":{"row":70,"column":13},"action":"remove","lines":["Tr"],"id":13},{"start":{"row":70,"column":11},"end":{"row":70,"column":15},"action":"insert","lines":["True"]}],[{"start":{"row":73,"column":0},"end":{"row":73,"column":2},"action":"insert","lines":["# "],"id":14}],[{"start":{"row":74,"column":0},"end":{"row":74,"column":2},"action":"remove","lines":["# "],"id":15}],[{"start":{"row":72,"column":0},"end":{"row":72,"column":2},"action":"insert","lines":["# "],"id":16}],[{"start":{"row":0,"column":0},"end":{"row":80,"column":26},"action":"remove","lines":["def is_even(number):","    \"\"\"","    A small helper function that simply checks to see if the number ","    question is an even number, or an odd number.","    `number` is the number in question","    Returns `True` if the number is even, `False` if the number is odd","    \"\"\"","    if number % 2 == 0:","        return True","    else:","        return False","        ","def even_number_of_evens(numbers):","    \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if the length of the list is greater than 0, iterate over each item","            to find out how many even numbers are in the list, and if the","            number of even numbers is an even number, return `True`","        - if the total number of even numbers in the list of 0, return `False`","        - if the number of even numbers contained in the list is an odd","            number, return `False`","        - if the list contains no items, return `False`","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number of even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty. If it is, return `False`, else start","    # the iterative process","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        number_of_evens = 0","        for number in numbers:","            if is_even(number):","                number_of_evens += 1","","        # If no even numbers are found, return `False`","        if number_of_evens == 0:","            return False","        evens = 0","","        # If the number of even numbers found, is even, return `True`,","        # else return `False`","        if is_even(number_of_evens):","            return True","        else:","            return False","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","","    if evens == 0:","        return False","    else:","        return evens % 2 == 0","","# Our set of test cases","assert even_number_of_evens([]) == False, \"No numbers\"        ","","def even_number_of_evens(numbers):","    return True","","# assert even_number_of_evens([]) == False, \"No numbers\"   ","# assert even_number_of_evens([2]) == False, \"One even number\"","assert even_number_of_evens([2, 4]) == True, \"Two even numbers\"","assert even_number_of_evens([2, 3]) == False, \"Two numbers, only one even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8]) == False, \"Multiple numbers, three even\"","# assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8, 5, 12]) == True, \"Multiple numbers, four even\"","assert even_number_of_evens([1, 3, 9]) == False, \"No even numbers\"","","print(\"All tests passed!\")"],"id":17},{"start":{"row":0,"column":0},"end":{"row":42,"column":27},"action":"insert","lines":["def even_number_of_evens(numbers):","    \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number od even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        evens = 0","","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","","    if evens == 0:","        return False","    else:","        return evens % 2 == 0","","# Our set of test cases","assert even_number_of_evens([]) == False, \"No numbers\"","assert even_number_of_evens([2]) == False, \"One even number\"","assert even_number_of_evens([2, 4]) == True, \"Two even numbers\"","assert even_number_of_evens([2, 3]) == False, \"Two numbers, only one even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8]) == False, \"Multiple numbers, three even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8, 5, 12]) == True, \"Multiple numbers, four even\"","assert even_number_of_evens([1, 3, 9]) == False, \"No even numbers\"","","# If all the test cases pass, print some successful info to the console to let","# the developer know","print(\"All tests passed!\") "]}],[{"start":{"row":35,"column":0},"end":{"row":35,"column":2},"action":"insert","lines":["# "],"id":18},{"start":{"row":36,"column":0},"end":{"row":36,"column":2},"action":"insert","lines":["# "]},{"start":{"row":37,"column":0},"end":{"row":37,"column":2},"action":"insert","lines":["# "]}],[{"start":{"row":12,"column":4},"end":{"row":17,"column":33},"action":"remove","lines":["# Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found"],"id":20}],[{"start":{"row":13,"column":4},"end":{"row":13,"column":8},"action":"remove","lines":["    "],"id":21}],[{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"remove","lines":["    "],"id":22}],[{"start":{"row":17,"column":0},"end":{"row":17,"column":1},"action":"insert","lines":[" "],"id":23},{"start":{"row":17,"column":1},"end":{"row":17,"column":2},"action":"insert","lines":[" "]},{"start":{"row":17,"column":2},"end":{"row":17,"column":3},"action":"insert","lines":[" "]},{"start":{"row":17,"column":3},"end":{"row":17,"column":4},"action":"insert","lines":[" "]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":7,"column":26},"action":"insert","lines":["def is_even(number):","    \"\"\"","    A simple helper function that will check to see if a number is even or not","    `number` is the number that we wish to check","    Returns True or False depending on whether or not the number is evenly","    divisble by 2","    \"\"\"","    return number % 2 == 0"],"id":25}],[{"start":{"row":10,"column":2},"end":{"row":33,"column":29},"action":"remove","lines":["  \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number od even numbers is even, return `True`","    \"\"\"","","    ","    evens = 0","","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","","    if evens == 0:","        return False","    else:","        return evens % 2 == 0"],"id":26}],[{"start":{"row":10,"column":2},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":27},{"start":{"row":11,"column":0},"end":{"row":11,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":11,"column":2},"end":{"row":11,"column":3},"action":"insert","lines":["e"],"id":28},{"start":{"row":11,"column":3},"end":{"row":11,"column":4},"action":"insert","lines":["v"]},{"start":{"row":11,"column":4},"end":{"row":11,"column":5},"action":"insert","lines":["e"]},{"start":{"row":11,"column":5},"end":{"row":11,"column":6},"action":"insert","lines":["n"]},{"start":{"row":11,"column":6},"end":{"row":11,"column":7},"action":"insert","lines":["s"]}],[{"start":{"row":11,"column":7},"end":{"row":11,"column":8},"action":"insert","lines":[" "],"id":29},{"start":{"row":11,"column":8},"end":{"row":11,"column":9},"action":"insert","lines":["="]}],[{"start":{"row":11,"column":9},"end":{"row":11,"column":10},"action":"insert","lines":[" "],"id":30}],[{"start":{"row":11,"column":10},"end":{"row":11,"column":11},"action":"insert","lines":["s"],"id":31},{"start":{"row":11,"column":11},"end":{"row":11,"column":12},"action":"insert","lines":["u"]},{"start":{"row":11,"column":12},"end":{"row":11,"column":13},"action":"insert","lines":["m"]}],[{"start":{"row":11,"column":13},"end":{"row":11,"column":15},"action":"insert","lines":["()"],"id":32}],[{"start":{"row":11,"column":14},"end":{"row":11,"column":16},"action":"insert","lines":["[]"],"id":33}],[{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"insert","lines":["1"],"id":34}],[{"start":{"row":11,"column":16},"end":{"row":11,"column":17},"action":"insert","lines":[" "],"id":35},{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"insert","lines":["f"]},{"start":{"row":11,"column":18},"end":{"row":11,"column":19},"action":"insert","lines":["o"]}],[{"start":{"row":11,"column":17},"end":{"row":11,"column":19},"action":"remove","lines":["fo"],"id":38},{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"remove","lines":["r"],"id":39}],[{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"insert","lines":["f"],"id":40},{"start":{"row":11,"column":18},"end":{"row":11,"column":19},"action":"insert","lines":["o"]},{"start":{"row":11,"column":19},"end":{"row":11,"column":20},"action":"insert","lines":["r"]}],[{"start":{"row":11,"column":20},"end":{"row":11,"column":21},"action":"insert","lines":[" "],"id":41},{"start":{"row":11,"column":21},"end":{"row":11,"column":22},"action":"insert","lines":["n"]}],[{"start":{"row":11,"column":22},"end":{"row":11,"column":23},"action":"insert","lines":[" "],"id":42},{"start":{"row":11,"column":23},"end":{"row":11,"column":24},"action":"insert","lines":["i"]},{"start":{"row":11,"column":24},"end":{"row":11,"column":25},"action":"insert","lines":["n"]}],[{"start":{"row":11,"column":25},"end":{"row":11,"column":26},"action":"insert","lines":[" "],"id":43},{"start":{"row":11,"column":26},"end":{"row":11,"column":27},"action":"insert","lines":["n"]},{"start":{"row":11,"column":27},"end":{"row":11,"column":28},"action":"insert","lines":["u"]}],[{"start":{"row":11,"column":26},"end":{"row":11,"column":28},"action":"remove","lines":["nu"],"id":44},{"start":{"row":11,"column":26},"end":{"row":11,"column":33},"action":"insert","lines":["numbers"]}],[{"start":{"row":11,"column":33},"end":{"row":11,"column":34},"action":"insert","lines":[" "],"id":45},{"start":{"row":11,"column":34},"end":{"row":11,"column":35},"action":"insert","lines":["i"]},{"start":{"row":11,"column":35},"end":{"row":11,"column":36},"action":"insert","lines":["f"]}],[{"start":{"row":11,"column":36},"end":{"row":11,"column":37},"action":"insert","lines":[" "],"id":46}],[{"start":{"row":11,"column":37},"end":{"row":11,"column":38},"action":"insert","lines":["i"],"id":47},{"start":{"row":11,"column":38},"end":{"row":11,"column":39},"action":"insert","lines":["s"]}],[{"start":{"row":11,"column":37},"end":{"row":11,"column":39},"action":"remove","lines":["is"],"id":48},{"start":{"row":11,"column":37},"end":{"row":11,"column":46},"action":"insert","lines":["is_even()"]}],[{"start":{"row":11,"column":45},"end":{"row":11,"column":46},"action":"insert","lines":["n"],"id":49}],[{"start":{"row":11,"column":49},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":50},{"start":{"row":12,"column":0},"end":{"row":12,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":12,"column":2},"end":{"row":12,"column":3},"action":"insert","lines":["r"],"id":51},{"start":{"row":12,"column":3},"end":{"row":12,"column":4},"action":"insert","lines":["e"]}],[{"start":{"row":12,"column":2},"end":{"row":12,"column":4},"action":"remove","lines":["re"],"id":52},{"start":{"row":12,"column":2},"end":{"row":12,"column":8},"action":"insert","lines":["return"]}],[{"start":{"row":12,"column":8},"end":{"row":12,"column":9},"action":"insert","lines":[" "],"id":53},{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"insert","lines":["f"]},{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"insert","lines":["a"]}],[{"start":{"row":12,"column":11},"end":{"row":12,"column":12},"action":"insert","lines":["l"],"id":54},{"start":{"row":12,"column":12},"end":{"row":12,"column":13},"action":"insert","lines":["s"]},{"start":{"row":12,"column":13},"end":{"row":12,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":12,"column":13},"end":{"row":12,"column":14},"action":"remove","lines":["e"],"id":55},{"start":{"row":12,"column":12},"end":{"row":12,"column":13},"action":"remove","lines":["s"]},{"start":{"row":12,"column":11},"end":{"row":12,"column":12},"action":"remove","lines":["l"]},{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"remove","lines":["a"]},{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"remove","lines":["f"]}],[{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"insert","lines":["F"],"id":56}],[{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"remove","lines":["F"],"id":57},{"start":{"row":12,"column":9},"end":{"row":12,"column":14},"action":"insert","lines":["False"]}],[{"start":{"row":12,"column":14},"end":{"row":12,"column":15},"action":"insert","lines":[" "],"id":58}],[{"start":{"row":12,"column":15},"end":{"row":12,"column":16},"action":"insert","lines":["i"],"id":59},{"start":{"row":12,"column":16},"end":{"row":12,"column":17},"action":"insert","lines":["f"]}],[{"start":{"row":12,"column":17},"end":{"row":12,"column":18},"action":"insert","lines":[" "],"id":60},{"start":{"row":12,"column":18},"end":{"row":12,"column":19},"action":"insert","lines":["e"]},{"start":{"row":12,"column":19},"end":{"row":12,"column":20},"action":"insert","lines":["v"]}],[{"start":{"row":12,"column":20},"end":{"row":12,"column":21},"action":"insert","lines":["e"],"id":61},{"start":{"row":12,"column":21},"end":{"row":12,"column":22},"action":"insert","lines":["n"]},{"start":{"row":12,"column":22},"end":{"row":12,"column":23},"action":"insert","lines":["s"]}],[{"start":{"row":12,"column":23},"end":{"row":12,"column":24},"action":"insert","lines":[" "],"id":62},{"start":{"row":12,"column":24},"end":{"row":12,"column":25},"action":"insert","lines":["="]},{"start":{"row":12,"column":25},"end":{"row":12,"column":26},"action":"insert","lines":["="]}],[{"start":{"row":12,"column":26},"end":{"row":12,"column":27},"action":"insert","lines":[" "],"id":63}],[{"start":{"row":12,"column":27},"end":{"row":12,"column":28},"action":"insert","lines":["0"],"id":64}],[{"start":{"row":12,"column":28},"end":{"row":12,"column":29},"action":"insert","lines":[" "],"id":65},{"start":{"row":12,"column":29},"end":{"row":12,"column":30},"action":"insert","lines":["e"]},{"start":{"row":12,"column":30},"end":{"row":12,"column":31},"action":"insert","lines":["l"]}],[{"start":{"row":12,"column":31},"end":{"row":12,"column":32},"action":"insert","lines":["s"],"id":66},{"start":{"row":12,"column":32},"end":{"row":12,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":12,"column":33},"end":{"row":12,"column":34},"action":"insert","lines":[" "],"id":67}],[{"start":{"row":12,"column":34},"end":{"row":12,"column":35},"action":"insert","lines":["i"],"id":68}],[{"start":{"row":12,"column":34},"end":{"row":12,"column":35},"action":"remove","lines":["i"],"id":69},{"start":{"row":12,"column":34},"end":{"row":12,"column":43},"action":"insert","lines":["is_even()"]}],[{"start":{"row":12,"column":42},"end":{"row":12,"column":43},"action":"insert","lines":["e"],"id":70},{"start":{"row":12,"column":43},"end":{"row":12,"column":44},"action":"insert","lines":["v"]},{"start":{"row":12,"column":44},"end":{"row":12,"column":45},"action":"insert","lines":["e"]}],[{"start":{"row":12,"column":42},"end":{"row":12,"column":45},"action":"remove","lines":["eve"],"id":71},{"start":{"row":12,"column":42},"end":{"row":12,"column":47},"action":"insert","lines":["evens"]}],[{"start":{"row":18,"column":0},"end":{"row":18,"column":2},"action":"remove","lines":["# "],"id":72},{"start":{"row":19,"column":0},"end":{"row":19,"column":2},"action":"remove","lines":["# "]},{"start":{"row":20,"column":0},"end":{"row":20,"column":2},"action":"remove","lines":["# "]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":73},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":29,"column":29},"action":"insert","lines":["def even_number_of_evens(numbers):","    \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number od even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        evens = 0","","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","","    if evens == 0:","        return False","    else:","        return evens % 2 == 0"],"id":74}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":2},"action":"insert","lines":["# "],"id":75},{"start":{"row":1,"column":0},"end":{"row":1,"column":2},"action":"insert","lines":["# "]},{"start":{"row":2,"column":0},"end":{"row":2,"column":2},"action":"insert","lines":["# "]},{"start":{"row":3,"column":0},"end":{"row":3,"column":2},"action":"insert","lines":["# "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":2},"action":"insert","lines":["# "]},{"start":{"row":6,"column":0},"end":{"row":6,"column":2},"action":"insert","lines":["# "]},{"start":{"row":7,"column":0},"end":{"row":7,"column":2},"action":"insert","lines":["# "]},{"start":{"row":8,"column":0},"end":{"row":8,"column":2},"action":"insert","lines":["# "]},{"start":{"row":9,"column":0},"end":{"row":9,"column":2},"action":"insert","lines":["# "]},{"start":{"row":10,"column":0},"end":{"row":10,"column":2},"action":"insert","lines":["# "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":2},"action":"insert","lines":["# "]},{"start":{"row":13,"column":0},"end":{"row":13,"column":2},"action":"insert","lines":["# "]},{"start":{"row":14,"column":0},"end":{"row":14,"column":2},"action":"insert","lines":["# "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":2},"action":"insert","lines":["# "]},{"start":{"row":16,"column":0},"end":{"row":16,"column":2},"action":"insert","lines":["# "]},{"start":{"row":17,"column":0},"end":{"row":17,"column":2},"action":"insert","lines":["# "]},{"start":{"row":18,"column":0},"end":{"row":18,"column":2},"action":"insert","lines":["# "]},{"start":{"row":20,"column":0},"end":{"row":20,"column":2},"action":"insert","lines":["# "]},{"start":{"row":21,"column":0},"end":{"row":21,"column":2},"action":"insert","lines":["# "]},{"start":{"row":22,"column":0},"end":{"row":22,"column":2},"action":"insert","lines":["# "]},{"start":{"row":23,"column":0},"end":{"row":23,"column":2},"action":"insert","lines":["# "]},{"start":{"row":24,"column":0},"end":{"row":24,"column":2},"action":"insert","lines":["# "]},{"start":{"row":26,"column":0},"end":{"row":26,"column":2},"action":"insert","lines":["# "]},{"start":{"row":27,"column":0},"end":{"row":27,"column":2},"action":"insert","lines":["# "]},{"start":{"row":28,"column":0},"end":{"row":28,"column":2},"action":"insert","lines":["# "]},{"start":{"row":29,"column":0},"end":{"row":29,"column":2},"action":"insert","lines":["# "]}]]},"ace":{"folds":[],"scrolltop":360,"scrollleft":0,"selection":{"start":{"row":31,"column":0},"end":{"row":31,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":25,"state":"start","mode":"ace/mode/python"}},"timestamp":1570129938115,"hash":"c0b4544f7babf0185579d695af9b161783903ca8"}